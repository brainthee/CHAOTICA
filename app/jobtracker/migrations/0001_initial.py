# Generated by Django 4.2.2 on 2023-10-06 13:13

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_bleach.models
import django_fsm
import jobtracker.models.orgunit
import model_utils.fields
import phone_field.models
import simple_history.models
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Address",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("street", models.CharField(max_length=250)),
                ("city", models.CharField(max_length=250)),
                ("county", models.CharField(blank=True, max_length=250, null=True)),
                ("postcode", models.CharField(max_length=25)),
                ("country", models.CharField(max_length=50)),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "Addresses",
            },
        ),
        migrations.CreateModel(
            name="BillingCode",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "code",
                    models.CharField(max_length=255, unique=True, verbose_name="Code"),
                ),
                ("is_chargeable", models.BooleanField(default=False)),
                ("is_recoverable", models.BooleanField(default=False)),
                ("is_closed", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["code"],
            },
        ),
        migrations.CreateModel(
            name="Certification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(default="", unique=True)),
            ],
            options={
                "ordering": ["name"],
                "permissions": (
                    ("view_users_certification", "View Users with Certification"),
                ),
                "unique_together": {("name",)},
            },
        ),
        migrations.CreateModel(
            name="Client",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Legal name of the client",
                        max_length=255,
                        unique=True,
                    ),
                ),
                ("slug", models.SlugField(default="", unique=True)),
                (
                    "short_name",
                    models.CharField(
                        blank=True,
                        help_text="To be used when referring to this client in documents such as proposals.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="External ID",
                    ),
                ),
                (
                    "hours_in_day",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("7.5"),
                        help_text="The number of billable hours in a day",
                        max_digits=3,
                        verbose_name="Hours in Day",
                    ),
                ),
                (
                    "specific_requirements",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="Any special notes, e.g. certain individuals, onboarding required etc",
                        null=True,
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "account_managers",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to=models.Q(("is_active", True)),
                        related_name="clients_is_am",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Account Managers",
                    ),
                ),
                (
                    "tech_account_managers",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to=models.Q(("is_active", True)),
                        related_name="clients_is_tam",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Technical Account Managers",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "permissions": (
                    ("assign_account_managers_client", "Assign Account Managers"),
                ),
            },
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("salutation", models.CharField(blank=True, max_length=10)),
                ("first_name", models.CharField(blank=True, max_length=200)),
                ("last_name", models.CharField(blank=True, max_length=200)),
                ("jobtitle", models.CharField(blank=True, max_length=200)),
                ("department", models.CharField(blank=True, max_length=200)),
                ("phone", phone_field.models.PhoneField(blank=True, max_length=200)),
                ("mobile", phone_field.models.PhoneField(blank=True, max_length=200)),
                ("email", models.EmailField(blank=True, max_length=254)),
                (
                    "company",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="contacts",
                        to="jobtracker.client",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Job",
            fields=[
                ("slug", models.UUIDField(default=uuid.uuid4, unique=True)),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Pending Scoping"),
                            (2, "Scoping"),
                            (3, "Additional Scoping Required"),
                            (4, "Pending Scope Signoff"),
                            (5, "Scoping Complete"),
                            (6, "Pending Start"),
                            (7, "In Progress"),
                            (8, "Completed"),
                            (9, "Lost"),
                            (10, "Deleted"),
                            (11, "Archived"),
                        ],
                        default=0,
                        help_text="Current state of the job",
                        protected=True,
                        verbose_name="Job Status",
                    ),
                ),
                (
                    "status_changed_date",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status"
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="External ID",
                    ),
                ),
                (
                    "id",
                    models.AutoField(
                        primary_key=True, serialize=False, verbose_name="Job ID"
                    ),
                ),
                ("title", models.CharField(max_length=250, verbose_name="Job Title")),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "start_date_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "delivery_date_set",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Delivery date",
                    ),
                ),
                (
                    "revenue",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        help_text="Cost of the job to the client",
                        max_digits=10,
                        null=True,
                        verbose_name="Sales Revenue",
                    ),
                ),
                (
                    "additional_kit_required",
                    models.BooleanField(
                        default=False, verbose_name="Additional kit required"
                    ),
                ),
                (
                    "additional_kit_info",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("kit_sourced_by_client", models.BooleanField(default=False)),
                (
                    "is_restricted",
                    models.BooleanField(
                        default=False,
                        verbose_name="Is the engagement Protectively Marked",
                    ),
                ),
                (
                    "restricted_detail",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (3, "SECRET"),
                            (2, "OFFICIAL-SENSITIVE"),
                            (1, "OFFICIAL"),
                            (0, "Unknown"),
                        ],
                        null=True,
                        verbose_name="GSC level",
                    ),
                ),
                (
                    "bespoke_project",
                    models.BooleanField(default=False, verbose_name="Bespoke Project"),
                ),
                (
                    "report_to_third_party",
                    models.BooleanField(
                        default=False, verbose_name="Report to 3rd party"
                    ),
                ),
                (
                    "is_time_limited",
                    models.BooleanField(default=False, verbose_name="Time Limited"),
                ),
                ("retest_included", models.BooleanField(default=False)),
                (
                    "technically_complex_test",
                    models.BooleanField(
                        default=False, verbose_name="Does the job involve complex tech"
                    ),
                ),
                (
                    "high_risk",
                    models.BooleanField(default=False, verbose_name="High Risk"),
                ),
                (
                    "reasons_for_high_risk",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("overview", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "scoping_requested_on",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Scoping requested on"
                    ),
                ),
                ("scoping_completed_date", models.DateTimeField(blank=True, null=True)),
                (
                    "account_manager",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs_am_for",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Account Manager",
                    ),
                ),
                (
                    "additional_contacts",
                    models.ManyToManyField(
                        blank=True,
                        related_name="jobs_contact_for",
                        to="jobtracker.contact",
                    ),
                ),
                (
                    "charge_codes",
                    models.ManyToManyField(
                        blank=True,
                        related_name="jobs",
                        to="jobtracker.billingcode",
                        verbose_name="Charge Code",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs",
                        to="jobtracker.client",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs_created",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "dep_account_manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="jobs_dam_for",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deputy Account Manager",
                    ),
                ),
            ],
            options={
                "verbose_name": "Job",
                "ordering": ["id"],
                "permissions": (
                    ("add_note", "Can Add Note"),
                    ("scope_job", "Can Scope Job"),
                    ("view_schedule", "Can View Schedule"),
                    ("change_schedule", "Can Change Schedule"),
                    ("assign_poc", "Can assign Point of Contact"),
                ),
            },
        ),
        migrations.CreateModel(
            name="Link",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="URL",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the link when other.", max_length=255
                    ),
                ),
                (
                    "linkType",
                    models.IntegerField(
                        choices=[
                            (0, "Other"),
                            (1, "GitLab Issue"),
                            (2, "SharePoint"),
                            (3, "Teams"),
                            (4, "Scheduling"),
                            (5, "Hosting"),
                        ],
                        default=0,
                        help_text="Type of link",
                        verbose_name="Link Type",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="OrganisationalUnit",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, unique=True)),
                ("slug", models.SlugField(default="", unique=True)),
                (
                    "description",
                    django_bleach.models.BleachField(default="", null=True),
                ),
                (
                    "image",
                    models.ImageField(
                        default="default.jpg",
                        upload_to=jobtracker.models.orgunit.get_media_image_file_path,
                    ),
                ),
                (
                    "targetProfit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("37"),
                        help_text="The % target profit for this unit",
                        max_digits=10,
                        verbose_name="Target Profit",
                    ),
                ),
                (
                    "businessHours_startTime",
                    models.TimeField(default="09:00:00", verbose_name="Start Time"),
                ),
                (
                    "businessHours_endTime",
                    models.TimeField(default="17:30:00", verbose_name="End Time"),
                ),
                (
                    "businessHours_days",
                    models.JSONField(
                        blank=True,
                        default=jobtracker.models.orgunit._default_business_days,
                        help_text="An int array with the numbers equaling the day of the week. Sunday == 0, Monday == 2 etc",
                        null=True,
                        verbose_name="Days",
                    ),
                ),
                (
                    "approval_required",
                    models.BooleanField(
                        default=True,
                        help_text="Approval by a Manager is required to join the unit",
                        verbose_name="Approval Required",
                    ),
                ),
                (
                    "special_requirements",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        default=1,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="units_lead",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "permissions": (
                    ("assign_members_organisationalunit", "Assign Members"),
                    ("can_view_unit_jobs", "Can view jobs"),
                    ("can_add_job", "Can add jobs"),
                    ("can_tqa_jobs", "Can TQA jobs"),
                    ("can_pqa_jobs", "Can PQA jobs"),
                    ("can_scope_jobs", "Can scope jobs"),
                    ("can_signoff_scopes", "Can signoff scopes"),
                    ("can_signoff_own_scopes", "Can signoff own scopes"),
                    ("view_users_schedule", "View Members Schedule"),
                    ("can_schedule_phases", "Can schedule phases"),
                ),
            },
        ),
        migrations.CreateModel(
            name="Phase",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("slug", models.SlugField(default="", unique=True)),
                (
                    "phase_id",
                    models.CharField(
                        max_length=100, unique=True, verbose_name="Phase ID"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Pending Scheduling"),
                            (2, "Schedule Tentative"),
                            (3, "Schedule Confirmed"),
                            (4, "Pre-checks"),
                            (5, "Client Not Ready"),
                            (6, "Ready to Begin"),
                            (7, "In Progress"),
                            (8, "Tech QA"),
                            (9, "Author Tech Updates"),
                            (10, "Pres QA"),
                            (11, "Author Pres Updates"),
                            (12, "Completed"),
                            (13, "Delivered"),
                            (14, "Cancelled"),
                            (15, "Postponed"),
                            (16, "Deleted"),
                            (17, "Archived"),
                        ],
                        db_index=True,
                        default=0,
                        protected=True,
                    ),
                ),
                ("phase_number", models.IntegerField(db_index=True)),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "test_target",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("comm_reqs", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "restrictions",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "scheduling_requirements",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "prerequisites",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "is_testing_onsite",
                    models.BooleanField(default=False, verbose_name="Testing Onsite"),
                ),
                (
                    "is_reporting_onsite",
                    models.BooleanField(default=False, verbose_name="Reporting Onsite"),
                ),
                ("location", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "number_of_reports",
                    models.IntegerField(
                        default=1,
                        help_text="If set to 0, this phase will not go through Technical or Presentation QA",
                    ),
                ),
                (
                    "report_to_be_left_on_client_site",
                    models.BooleanField(default=False),
                ),
                (
                    "linkDeliverable",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Deliverable",
                    ),
                ),
                (
                    "linkTechData",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Technical Data",
                    ),
                ),
                (
                    "linkReportData",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Report Data",
                    ),
                ),
                (
                    "start_date_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "delivery_date_set",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Delivery date",
                    ),
                ),
                (
                    "due_to_techqa_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from the end of last day of reporting",
                        null=True,
                        verbose_name="Due to Tech QA",
                    ),
                ),
                (
                    "due_to_presqa_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from the end of last day of reporting plus QA days",
                        null=True,
                        verbose_name="Due to Pres QA",
                    ),
                ),
                ("cancellation_date", models.DateTimeField(blank=True, null=True)),
                (
                    "pre_consultancy_checks_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "status_changed_date",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status"
                    ),
                ),
                (
                    "feedback_scope_correct",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=None,
                        null=True,
                        verbose_name="Was scope correct?",
                    ),
                ),
                (
                    "techqa_report_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Major changes needed to much of the report"),
                            (
                                1,
                                "Significant changes needed (e.g. add/remove findings, re-write execute summary)",
                            ),
                            (
                                2,
                                "Average report. Some changes needed to finding detail or executive summary",
                            ),
                            (
                                3,
                                "Good. Minor changes (punctuation, grammar, or minor details only)",
                            ),
                            (4, "Excellent. No/trivial changes required"),
                        ],
                        null=True,
                        verbose_name="Report rating by person doing tech QA",
                    ),
                ),
                (
                    "presqa_report_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Major changes needed to much of the report"),
                            (
                                1,
                                "Significant changes needed (client specific requirements missing, issues to be restructured, headers and footers to be updated, etc.)",
                            ),
                            (
                                2,
                                "Average report. Some changes neeeded to text or structure of report which required clarification from author/Tech QA'er",
                            ),
                            (
                                3,
                                "Good. Minor changes (punctuation, grammar, or minor details only)",
                            ),
                            (4, "Excellent. No/trivial changes required"),
                        ],
                        null=True,
                        verbose_name="PresQA report rating",
                    ),
                ),
                (
                    "delivery_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Delivery Hours",
                    ),
                ),
                (
                    "reporting_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Reporting Hours",
                    ),
                ),
                (
                    "mgmt_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Management Hours",
                    ),
                ),
                (
                    "qa_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="QA Hours",
                    ),
                ),
                (
                    "oversight_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Oversight Hours",
                    ),
                ),
                (
                    "debrief_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Debrief Hours",
                    ),
                ),
                (
                    "contingency_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Contingency Hours",
                    ),
                ),
                (
                    "other_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Other Hours",
                    ),
                ),
                ("last_modified", models.DateTimeField(auto_now=True)),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                (
                    "job",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="phases",
                        to="jobtracker.job",
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "presqa_by",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="presqaed_phases",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Pres QA by",
                    ),
                ),
                (
                    "project_lead",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="phase_where_project_lead",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "report_author",
                    models.ForeignKey(
                        blank=True,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="phase_where_report_author",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Phase",
                "ordering": ("-job__id", "phase_number"),
                "permissions": (),
            },
        ),
        migrations.CreateModel(
            name="SkillCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(default="", unique=True)),
            ],
            options={
                "verbose_name_plural": "Skill Categories",
                "ordering": ["name"],
                "permissions": (),
            },
        ),
        migrations.CreateModel(
            name="WorkflowTasks",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "appliedModel",
                    models.IntegerField(
                        choices=[(1, "Job"), (2, "Phase")],
                        default=1,
                        verbose_name="Applicable Model",
                    ),
                ),
                ("status", models.IntegerField(default=0, verbose_name="Status")),
                ("task", models.CharField(max_length=255, verbose_name="Task")),
            ],
        ),
        migrations.CreateModel(
            name="TimeSlot",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("start", models.DateTimeField()),
                ("end", models.DateTimeField()),
                (
                    "deliveryRole",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Delivery"),
                            (2, "Reporting"),
                            (3, "Management"),
                            (4, "QA"),
                            (5, "Oversight"),
                            (6, "Debrief"),
                            (7, "Contingency"),
                            (8, "Other"),
                        ],
                        default=0,
                        help_text="Type of role in job",
                        verbose_name="Type",
                    ),
                ),
                (
                    "is_onsite",
                    models.BooleanField(
                        default=False,
                        help_text="Is this slot onsite",
                        verbose_name="Is onsite",
                    ),
                ),
                (
                    "slotType",
                    models.IntegerField(
                        choices=[(0, "Generic"), (1, "Internal"), (2, "Delivery")],
                        default=0,
                        help_text="Type of time",
                        verbose_name="Type",
                    ),
                ),
                (
                    "phase",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timeslots",
                        to="jobtracker.phase",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to=models.Q(("is_active", True)),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="timeslots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Skill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("slug", models.SlugField(default="", unique=True)),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="skills",
                        to="jobtracker.skillcategory",
                    ),
                ),
            ],
            options={
                "ordering": ["category", "name"],
                "permissions": (("view_users_skill", "View Users with Skill"),),
                "unique_together": {("category", "name")},
            },
        ),
        migrations.CreateModel(
            name="Service",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, unique=True)),
                ("slug", models.SlugField(default="", unique=True)),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "owners",
                    models.ManyToManyField(
                        blank=True,
                        limit_choices_to={"is_active": True},
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "skillsDesired",
                    models.ManyToManyField(
                        blank=True,
                        related_name="services_skill_desired",
                        to="jobtracker.skill",
                    ),
                ),
                (
                    "skillsRequired",
                    models.ManyToManyField(
                        blank=True,
                        related_name="services_skill_required",
                        to="jobtracker.skill",
                    ),
                ),
            ],
            options={
                "ordering": ["name"],
                "permissions": (("assign_to_phase", "Assign To Phase"),),
            },
        ),
        migrations.AddField(
            model_name="phase",
            name="service",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="phases",
                to="jobtracker.service",
            ),
        ),
        migrations.AddField(
            model_name="phase",
            name="techqa_by",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(("is_staff", True)),
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="techqaed_phases",
                to=settings.AUTH_USER_MODEL,
                verbose_name="Tech QA by",
            ),
        ),
        migrations.CreateModel(
            name="OrganisationalUnitMember",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[
                            (0, "Pending Approval"),
                            (1, "Consultant"),
                            (2, "Sales"),
                            (3, "Service Delivery"),
                            (4, "Manager"),
                            (5, "Tech QA'er"),
                            (6, "Pres QA'er"),
                            (7, "Scoper"),
                        ],
                        default=1,
                        verbose_name="Role",
                    ),
                ),
                (
                    "add_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date the user was added to the unit",
                        verbose_name="Date Added",
                    ),
                ),
                (
                    "mod_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last date the membership was modified",
                        verbose_name="Date Modified",
                    ),
                ),
                (
                    "left_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date the user left the group",
                        null=True,
                        verbose_name="Date Left",
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unitmember_invites",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="unit_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="members",
                        to="jobtracker.organisationalunit",
                    ),
                ),
            ],
            options={
                "ordering": ["member", "-role"],
                "get_latest_by": "mod_date",
            },
        ),
        migrations.AddField(
            model_name="job",
            name="links",
            field=models.ManyToManyField(
                blank=True, related_name="jobs", to="jobtracker.link"
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="previous_jobs",
            field=models.ManyToManyField(
                blank=True, related_name="associated_jobs", to="jobtracker.job"
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="primary_client_poc",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="jobs_poc_for",
                to="jobtracker.contact",
                verbose_name="Primary Point of Contact",
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="scoped_by",
            field=models.ManyToManyField(
                blank=True,
                limit_choices_to=models.Q(("is_active", True)),
                related_name="engagements_that_scoped",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="scoped_signed_off_by",
            field=models.ForeignKey(
                blank=True,
                limit_choices_to=models.Q(("is_active", True)),
                null=True,
                on_delete=django.db.models.deletion.PROTECT,
                related_name="engagements_that_signed_off_scope",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AddField(
            model_name="job",
            name="unit",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="jobs",
                to="jobtracker.organisationalunit",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalService",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=200)),
                ("slug", models.SlugField(default="")),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical service",
                "verbose_name_plural": "historical services",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalPhase",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("slug", models.SlugField(default="")),
                (
                    "phase_id",
                    models.CharField(
                        db_index=True, max_length=100, verbose_name="Phase ID"
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Pending Scheduling"),
                            (2, "Schedule Tentative"),
                            (3, "Schedule Confirmed"),
                            (4, "Pre-checks"),
                            (5, "Client Not Ready"),
                            (6, "Ready to Begin"),
                            (7, "In Progress"),
                            (8, "Tech QA"),
                            (9, "Author Tech Updates"),
                            (10, "Pres QA"),
                            (11, "Author Pres Updates"),
                            (12, "Completed"),
                            (13, "Delivered"),
                            (14, "Cancelled"),
                            (15, "Postponed"),
                            (16, "Deleted"),
                            (17, "Archived"),
                        ],
                        db_index=True,
                        default=0,
                        protected=True,
                    ),
                ),
                ("phase_number", models.IntegerField(db_index=True)),
                ("title", models.CharField(max_length=200)),
                (
                    "description",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "test_target",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("comm_reqs", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "restrictions",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "scheduling_requirements",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "prerequisites",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                (
                    "is_testing_onsite",
                    models.BooleanField(default=False, verbose_name="Testing Onsite"),
                ),
                (
                    "is_reporting_onsite",
                    models.BooleanField(default=False, verbose_name="Reporting Onsite"),
                ),
                ("location", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "number_of_reports",
                    models.IntegerField(
                        default=1,
                        help_text="If set to 0, this phase will not go through Technical or Presentation QA",
                    ),
                ),
                (
                    "report_to_be_left_on_client_site",
                    models.BooleanField(default=False),
                ),
                (
                    "linkDeliverable",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Deliverable",
                    ),
                ),
                (
                    "linkTechData",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Technical Data",
                    ),
                ),
                (
                    "linkReportData",
                    models.URLField(
                        blank=True,
                        default="",
                        max_length=2000,
                        null=True,
                        verbose_name="Link to Report Data",
                    ),
                ),
                (
                    "start_date_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "delivery_date_set",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Delivery date",
                    ),
                ),
                (
                    "due_to_techqa_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from the end of last day of reporting",
                        null=True,
                        verbose_name="Due to Tech QA",
                    ),
                ),
                (
                    "due_to_presqa_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from the end of last day of reporting plus QA days",
                        null=True,
                        verbose_name="Due to Pres QA",
                    ),
                ),
                ("cancellation_date", models.DateTimeField(blank=True, null=True)),
                (
                    "pre_consultancy_checks_date",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "status_changed_date",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status"
                    ),
                ),
                (
                    "feedback_scope_correct",
                    models.BooleanField(
                        choices=[(True, "Yes"), (False, "No")],
                        default=None,
                        null=True,
                        verbose_name="Was scope correct?",
                    ),
                ),
                (
                    "techqa_report_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Major changes needed to much of the report"),
                            (
                                1,
                                "Significant changes needed (e.g. add/remove findings, re-write execute summary)",
                            ),
                            (
                                2,
                                "Average report. Some changes needed to finding detail or executive summary",
                            ),
                            (
                                3,
                                "Good. Minor changes (punctuation, grammar, or minor details only)",
                            ),
                            (4, "Excellent. No/trivial changes required"),
                        ],
                        null=True,
                        verbose_name="Report rating by person doing tech QA",
                    ),
                ),
                (
                    "presqa_report_rating",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (0, "Major changes needed to much of the report"),
                            (
                                1,
                                "Significant changes needed (client specific requirements missing, issues to be restructured, headers and footers to be updated, etc.)",
                            ),
                            (
                                2,
                                "Average report. Some changes neeeded to text or structure of report which required clarification from author/Tech QA'er",
                            ),
                            (
                                3,
                                "Good. Minor changes (punctuation, grammar, or minor details only)",
                            ),
                            (4, "Excellent. No/trivial changes required"),
                        ],
                        null=True,
                        verbose_name="PresQA report rating",
                    ),
                ),
                (
                    "delivery_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Delivery Hours",
                    ),
                ),
                (
                    "reporting_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Reporting Hours",
                    ),
                ),
                (
                    "mgmt_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Management Hours",
                    ),
                ),
                (
                    "qa_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="QA Hours",
                    ),
                ),
                (
                    "oversight_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Oversight Hours",
                    ),
                ),
                (
                    "debrief_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Debrief Hours",
                    ),
                ),
                (
                    "contingency_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Contingency Hours",
                    ),
                ),
                (
                    "other_hours",
                    models.DecimalField(
                        decimal_places=2,
                        default=0,
                        max_digits=4,
                        verbose_name="Other Hours",
                    ),
                ),
                ("last_modified", models.DateTimeField(blank=True, editable=False)),
                ("created_date", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "job",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.job",
                    ),
                ),
                (
                    "last_modified_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "presqa_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Pres QA by",
                    ),
                ),
                (
                    "project_lead",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "report_author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "service",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.service",
                    ),
                ),
                (
                    "techqa_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(("is_staff", True)),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Tech QA by",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Phase",
                "verbose_name_plural": "historical Phases",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOrganisationalUnitMember",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "role",
                    models.IntegerField(
                        choices=[
                            (0, "Pending Approval"),
                            (1, "Consultant"),
                            (2, "Sales"),
                            (3, "Service Delivery"),
                            (4, "Manager"),
                            (5, "Tech QA'er"),
                            (6, "Pres QA'er"),
                            (7, "Scoper"),
                        ],
                        default=1,
                        verbose_name="Role",
                    ),
                ),
                (
                    "add_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date the user was added to the unit",
                        verbose_name="Date Added",
                    ),
                ),
                (
                    "mod_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Last date the membership was modified",
                        verbose_name="Date Modified",
                    ),
                ),
                (
                    "left_date",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date the user left the group",
                        null=True,
                        verbose_name="Date Left",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "inviter",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "member",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.organisationalunit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical organisational unit member",
                "verbose_name_plural": "historical organisational unit members",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalOrganisationalUnit",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(db_index=True, max_length=255)),
                ("slug", models.SlugField(default="")),
                (
                    "description",
                    django_bleach.models.BleachField(default="", null=True),
                ),
                ("image", models.TextField(default="default.jpg", max_length=100)),
                (
                    "targetProfit",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("37"),
                        help_text="The % target profit for this unit",
                        max_digits=10,
                        verbose_name="Target Profit",
                    ),
                ),
                (
                    "businessHours_startTime",
                    models.TimeField(default="09:00:00", verbose_name="Start Time"),
                ),
                (
                    "businessHours_endTime",
                    models.TimeField(default="17:30:00", verbose_name="End Time"),
                ),
                (
                    "businessHours_days",
                    models.JSONField(
                        blank=True,
                        default=jobtracker.models.orgunit._default_business_days,
                        help_text="An int array with the numbers equaling the day of the week. Sunday == 0, Monday == 2 etc",
                        null=True,
                        verbose_name="Days",
                    ),
                ),
                (
                    "approval_required",
                    models.BooleanField(
                        default=True,
                        help_text="Approval by a Manager is required to join the unit",
                        verbose_name="Approval Required",
                    ),
                ),
                (
                    "special_requirements",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lead",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=1,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical organisational unit",
                "verbose_name_plural": "historical organisational units",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalJob",
            fields=[
                ("slug", models.UUIDField(db_index=True, default=uuid.uuid4)),
                (
                    "status",
                    django_fsm.FSMIntegerField(
                        choices=[
                            (0, "Draft"),
                            (1, "Pending Scoping"),
                            (2, "Scoping"),
                            (3, "Additional Scoping Required"),
                            (4, "Pending Scope Signoff"),
                            (5, "Scoping Complete"),
                            (6, "Pending Start"),
                            (7, "In Progress"),
                            (8, "Completed"),
                            (9, "Lost"),
                            (10, "Deleted"),
                            (11, "Archived"),
                        ],
                        default=0,
                        help_text="Current state of the job",
                        protected=True,
                        verbose_name="Job Status",
                    ),
                ),
                (
                    "status_changed_date",
                    model_utils.fields.MonitorField(
                        default=django.utils.timezone.now, monitor="status"
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="External ID",
                    ),
                ),
                (
                    "id",
                    models.IntegerField(
                        blank=True, db_index=True, verbose_name="Job ID"
                    ),
                ),
                ("title", models.CharField(max_length=250, verbose_name="Job Title")),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                (
                    "start_date_set",
                    models.DateField(
                        blank=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Start Date",
                    ),
                ),
                (
                    "delivery_date_set",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="If left blank, this will be automatically determined from scheduled slots",
                        null=True,
                        verbose_name="Delivery date",
                    ),
                ),
                (
                    "revenue",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        default=0,
                        help_text="Cost of the job to the client",
                        max_digits=10,
                        null=True,
                        verbose_name="Sales Revenue",
                    ),
                ),
                (
                    "additional_kit_required",
                    models.BooleanField(
                        default=False, verbose_name="Additional kit required"
                    ),
                ),
                (
                    "additional_kit_info",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("kit_sourced_by_client", models.BooleanField(default=False)),
                (
                    "is_restricted",
                    models.BooleanField(
                        default=False,
                        verbose_name="Is the engagement Protectively Marked",
                    ),
                ),
                (
                    "restricted_detail",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (3, "SECRET"),
                            (2, "OFFICIAL-SENSITIVE"),
                            (1, "OFFICIAL"),
                            (0, "Unknown"),
                        ],
                        null=True,
                        verbose_name="GSC level",
                    ),
                ),
                (
                    "bespoke_project",
                    models.BooleanField(default=False, verbose_name="Bespoke Project"),
                ),
                (
                    "report_to_third_party",
                    models.BooleanField(
                        default=False, verbose_name="Report to 3rd party"
                    ),
                ),
                (
                    "is_time_limited",
                    models.BooleanField(default=False, verbose_name="Time Limited"),
                ),
                ("retest_included", models.BooleanField(default=False)),
                (
                    "technically_complex_test",
                    models.BooleanField(
                        default=False, verbose_name="Does the job involve complex tech"
                    ),
                ),
                (
                    "high_risk",
                    models.BooleanField(default=False, verbose_name="High Risk"),
                ),
                (
                    "reasons_for_high_risk",
                    django_bleach.models.BleachField(blank=True, null=True),
                ),
                ("overview", django_bleach.models.BleachField(blank=True, null=True)),
                (
                    "scoping_requested_on",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="Scoping requested on"
                    ),
                ),
                ("scoping_completed_date", models.DateTimeField(blank=True, null=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "account_manager",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Account Manager",
                    ),
                ),
                (
                    "client",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.client",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Created By",
                    ),
                ),
                (
                    "dep_account_manager",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Deputy Account Manager",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "primary_client_poc",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.contact",
                        verbose_name="Primary Point of Contact",
                    ),
                ),
                (
                    "scoped_signed_off_by",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        limit_choices_to=models.Q(("is_active", True)),
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "unit",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.organisationalunit",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Job",
                "verbose_name_plural": "historical Jobs",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalFeedback",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "feedbackType",
                    models.IntegerField(
                        choices=[
                            (0, "Scoping"),
                            (1, "Technical"),
                            (2, "Presentation"),
                            (3, "Other"),
                        ],
                        default=3,
                        help_text="Type of feedback",
                        verbose_name="Type",
                    ),
                ),
                ("body", django_bleach.models.BleachField()),
                ("created_on", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "phase",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="jobtracker.phase",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical feedback",
                "verbose_name_plural": "historical feedbacks",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalClient",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Legal name of the client",
                        max_length=255,
                    ),
                ),
                ("slug", models.SlugField(default="")),
                (
                    "short_name",
                    models.CharField(
                        blank=True,
                        help_text="To be used when referring to this client in documents such as proposals.",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="External ID",
                    ),
                ),
                (
                    "hours_in_day",
                    models.DecimalField(
                        decimal_places=1,
                        default=Decimal("7.5"),
                        help_text="The number of billable hours in a day",
                        max_digits=3,
                        verbose_name="Hours in Day",
                    ),
                ),
                (
                    "specific_requirements",
                    django_bleach.models.BleachField(
                        blank=True,
                        help_text="Any special notes, e.g. certain individuals, onboarding required etc",
                        null=True,
                    ),
                ),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical client",
                "verbose_name_plural": "historical clients",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalAddress",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("street", models.CharField(max_length=250)),
                ("city", models.CharField(max_length=250)),
                ("county", models.CharField(blank=True, max_length=250, null=True)),
                ("postcode", models.CharField(max_length=25)),
                ("country", models.CharField(max_length=50)),
                (
                    "data",
                    models.JSONField(
                        blank=True, default=dict, null=True, verbose_name="Data"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical address",
                "verbose_name_plural": "historical Addresses",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Feedback",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "feedbackType",
                    models.IntegerField(
                        choices=[
                            (0, "Scoping"),
                            (1, "Technical"),
                            (2, "Presentation"),
                            (3, "Other"),
                        ],
                        default=3,
                        help_text="Type of feedback",
                        verbose_name="Type",
                    ),
                ),
                ("body", django_bleach.models.BleachField()),
                ("created_on", models.DateTimeField(auto_now_add=True)),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="written_feedback",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "phase",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="feedback",
                        to="jobtracker.phase",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_on"],
                "permissions": (),
            },
        ),
        migrations.CreateModel(
            name="UserSkill",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "rating",
                    models.IntegerField(
                        choices=[
                            (0, "No experience"),
                            (1, "Can do with support"),
                            (2, "Can do alone"),
                            (3, "Specialist"),
                        ],
                        default=0,
                    ),
                ),
                ("interested_in_improving_skill", models.BooleanField(default=False)),
                ("last_updated_on", models.DateTimeField(auto_now=True)),
                (
                    "skill",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="users",
                        to="jobtracker.skill",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to=models.Q(("is_active", True)),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="skills",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["-rating", "user"],
                "unique_together": {("user", "skill")},
            },
        ),
        migrations.CreateModel(
            name="UserCertification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_updated_on", models.DateTimeField(auto_now=True)),
                (
                    "certification",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="users",
                        to="jobtracker.certification",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        limit_choices_to=models.Q(("is_active", True)),
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="certifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "ordering": ["certification", "user"],
                "unique_together": {("user", "certification")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="phase",
            unique_together={("job", "phase_number")},
        ),
    ]
