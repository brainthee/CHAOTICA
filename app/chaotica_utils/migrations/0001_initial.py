# Generated by Django 5.0.3 on 2024-03-25 18:26

import chaotica_utils.models
import datetime
import django.contrib.auth.models
import django.db.models.deletion
import django.db.models.functions.text
import django.db.models.manager
import django.utils.timezone
import django_countries.fields
import phonenumber_field.modelfields
import simple_history.models
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
        ("contenttypes", "0002_remove_content_type_name"),
    ]

    operations = [
        migrations.CreateModel(
            name="HolidayCountry",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("country", django_countries.fields.CountryField(max_length=2)),
            ],
            options={
                "ordering": [django.db.models.functions.text.Lower("country")],
            },
        ),
        migrations.CreateModel(
            name="Note",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "create_date",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date the record was created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "mod_date",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date the record was last modified",
                        verbose_name="Last Modified",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Note Text", verbose_name="Content"
                    ),
                ),
                (
                    "is_system_note",
                    models.BooleanField(
                        default=False,
                        help_text="Is the note generated by the system",
                        verbose_name="System Note",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
            ],
            options={
                "verbose_name": "Note",
                "verbose_name_plural": "Notes",
                "ordering": ["-create_date"],
            },
            managers=[
                ("system_objects", django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name="Notification",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("title", models.CharField(default="", max_length=255)),
                (
                    "icon",
                    models.CharField(blank=True, default="", max_length=255, null=True),
                ),
                ("message", models.TextField(default="")),
                ("link", models.URLField(blank=True, null=True)),
                ("is_read", models.BooleanField(default=False)),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="UserCost",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "effective_from",
                    models.DateField(
                        blank=True,
                        help_text="Date cost applies from",
                        null=True,
                        verbose_name="Effective From",
                    ),
                ),
                (
                    "cost_per_hour",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Cost of the user per hour",
                        max_digits=10,
                        null=True,
                        verbose_name="Cost Per Hour",
                    ),
                ),
            ],
            options={
                "ordering": ["user", "-effective_from"],
            },
        ),
        migrations.CreateModel(
            name="UserInvitation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "invited_email",
                    models.EmailField(
                        max_length=255, unique=True, verbose_name="Email Address"
                    ),
                ),
                (
                    "accepted",
                    models.BooleanField(
                        default=False,
                        help_text="Has the invitation been accepted",
                        verbose_name="Accepted",
                    ),
                ),
                (
                    "invite_id",
                    models.UUIDField(default=uuid.uuid4, verbose_name="Invitation ID"),
                ),
                ("sent", models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Group",
            fields=[],
            options={
                "proxy": True,
                "indexes": [],
                "constraints": [],
            },
            bases=("auth.group",),
            managers=[
                ("objects", django.contrib.auth.models.GroupManager()),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        max_length=254, unique=True, verbose_name="Email Address"
                    ),
                ),
                (
                    "pref_timezone",
                    models.CharField(
                        blank=True,
                        default="UTC",
                        max_length=255,
                        null=True,
                        verbose_name="Time Zone",
                    ),
                ),
                (
                    "job_title",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="Job Title",
                    ),
                ),
                (
                    "location",
                    models.CharField(
                        blank=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="Location",
                    ),
                ),
                (
                    "country",
                    django_countries.fields.CountryField(default="GB", max_length=2),
                ),
                (
                    "external_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        max_length=255,
                        null=True,
                        verbose_name="External ID",
                    ),
                ),
                (
                    "phone_number",
                    phonenumber_field.modelfields.PhoneNumberField(
                        blank=True, max_length=128, region=None
                    ),
                ),
                (
                    "show_help",
                    models.BooleanField(
                        default=True,
                        help_text="Should help be shown",
                        verbose_name="Show Helpful Tips",
                    ),
                ),
                (
                    "site_theme",
                    models.CharField(
                        default="light", max_length=20, verbose_name="Site Theme"
                    ),
                ),
                (
                    "schedule_feed_id",
                    models.UUIDField(
                        default=uuid.uuid4, verbose_name="Calendar Feed Key"
                    ),
                ),
                (
                    "schedule_feed_family_id",
                    models.UUIDField(
                        default=uuid.uuid4, verbose_name="Calendar Feed Family Key"
                    ),
                ),
                (
                    "profile_image",
                    models.ImageField(
                        blank=True,
                        upload_to=chaotica_utils.models.get_media_profile_file_path,
                    ),
                ),
                (
                    "contracted_leave",
                    models.IntegerField(
                        default=25, verbose_name="Contracted Days Leave"
                    ),
                ),
                (
                    "contracted_leave_renewal",
                    models.DateField(
                        default=datetime.date(2023, 9, 1),
                        verbose_name="Leave Renewal Date",
                    ),
                ),
                (
                    "profile_last_updated",
                    models.DateField(
                        blank=True, null=True, verbose_name="Profile Last Updated"
                    ),
                ),
                (
                    "acting_manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=models.SET(chaotica_utils.models.get_sentinel_user),
                        related_name="users_acting_managed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "manager",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=models.SET(chaotica_utils.models.get_sentinel_user),
                        related_name="users_managed",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "ordering": [
                    django.db.models.functions.text.Lower("last_name"),
                    django.db.models.functions.text.Lower("first_name"),
                ],
                "permissions": (
                    ("manage_user", "Can manage the user"),
                    ("impersonate_users", "Can impersonate other users"),
                    ("manage_site_settings", "Can change site settings"),
                ),
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="HistoricalNote",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "create_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date the record was created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "mod_date",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="Date the record was last modified",
                        verbose_name="Last Modified",
                    ),
                ),
                (
                    "content",
                    models.TextField(
                        blank=True, help_text="Note Text", verbose_name="Content"
                    ),
                ),
                (
                    "is_system_note",
                    models.BooleanField(
                        default=False,
                        help_text="Is the note generated by the system",
                        verbose_name="System Note",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical Note",
                "verbose_name_plural": "historical Notes",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="Holiday",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField(db_index=True)),
                ("subdivs", models.JSONField(blank=True, default=list)),
                ("reason", models.CharField(max_length=255)),
                (
                    "country",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="chaotica_utils.holidaycountry",
                    ),
                ),
            ],
            options={
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="Language",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("lang_code", models.CharField(max_length=10)),
                ("display_name", models.CharField(max_length=255)),
            ],
            options={
                "ordering": [django.db.models.functions.text.Lower("display_name")],
                "unique_together": {("lang_code", "display_name")},
            },
        ),
        migrations.AddField(
            model_name="user",
            name="languages",
            field=models.ManyToManyField(
                blank=True, to="chaotica_utils.language", verbose_name="Languages"
            ),
        ),
        migrations.CreateModel(
            name="LeaveRequest",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("requested_on", models.DateTimeField(auto_now_add=True)),
                ("start_date", models.DateTimeField(db_index=True)),
                ("end_date", models.DateTimeField(db_index=True)),
                (
                    "type_of_leave",
                    models.IntegerField(
                        choices=[
                            (0, "Annual leave"),
                            (1, "Time Off in Lieu"),
                            (2, "Unpaid leave"),
                            (3, "Compassionate leave"),
                            (4, "Paternity/Maternity"),
                            (5, "Jury service"),
                            (6, "Military leave"),
                            (7, "Sick"),
                        ]
                    ),
                ),
                ("notes", models.TextField(blank=True)),
                ("authorised", models.BooleanField(default=False)),
                ("authorised_on", models.DateTimeField(blank=True, null=True)),
                ("cancelled", models.BooleanField(default=False)),
                ("cancelled_on", models.DateTimeField(blank=True, null=True)),
                ("declined", models.BooleanField(default=False)),
                ("declined_on", models.DateTimeField(blank=True, null=True)),
                (
                    "authorised_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="leave_records_authorised",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "declined_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="leave_records_declined",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Leave Request",
                "ordering": ["start_date"],
            },
        ),
    ]
