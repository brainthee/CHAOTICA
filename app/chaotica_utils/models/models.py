from django.db import models
import uuid
import os
from ..managers import SystemNoteManager
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes.fields import GenericForeignKey
from django.conf import settings
from django.contrib.auth import get_user_model
from simple_history.models import HistoricalRecords
from datetime import date
from django.db.models.functions import Lower
from django_countries.fields import CountryField
from ..utils import get_sentinel_user


class Note(models.Model):
    create_date = models.DateTimeField(
        verbose_name="Created",
        auto_now_add=True,
        help_text="Date the record was created",
    )
    mod_date = models.DateTimeField(
        verbose_name="Last Modified",
        auto_now=True,
        help_text="Date the record was last modified",
    )
    history = HistoricalRecords()
    content = models.TextField(
        verbose_name="Content", blank=True, help_text="Note Text"
    )
    author = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True,
        blank=True,
        on_delete=models.SET(get_sentinel_user),
    )
    is_system_note = models.BooleanField(
        default=False,
        help_text="Is the note generated by the system",
        verbose_name="System Note",
    )
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.PositiveIntegerField()
    content_object = GenericForeignKey("content_type", "object_id")

    system_objects = SystemNoteManager()
    objects = models.Manager()

    class Meta:
        verbose_name = "Note"
        verbose_name_plural = "Notes"
        ordering = ["-create_date"]


def get_media_profile_file_path(_, filename):
    ext = filename.split(".")[-1]
    filename = "%s.%s" % (uuid.uuid4(), ext)
    return os.path.join("profile_pics", filename)


def get_media_image_file_path(_, filename):
    ext = filename.split(".")[-1]
    filename = "%s.%s" % (uuid.uuid4(), ext)
    return os.path.join("images", filename)


class Language(models.Model):
    lang_code = models.CharField(max_length=10)
    display_name = models.CharField(max_length=255)

    class Meta:
        ordering = [Lower("display_name")]
        unique_together = ["lang_code", "display_name"]

    def __str__(self):
        return "{}".format(self.display_name)


class HolidayManager(models.Manager):
    def get_date_list(self, start_date, end_date, country=None):
        if not (isinstance(start_date, date) and isinstance(end_date, date)):
            raise TypeError(
                "Both start_date and end_date must be datetime.date objects"
            )

        matches = self.filter(date__gte=start_date, date__lte=end_date)

        if country:
            matches.filter(country=country)

        data = matches.values_list("date", flat=True)
        return data


class Holiday(models.Model):
    objects = HolidayManager()
    date = models.DateField(db_index=True)
    country = CountryField(blank=True, null=True)
    subdivs = models.JSONField(default=list, blank=True)
    reason = models.CharField(max_length=255)

    def __str__(self):
        if self.country:
            return "{} ({})".format(str(self.reason), str(self.country))
        else:
            return "{}".format(str(self.reason))

    def get_schedule_json(self):
        return {
            "title": str(self),
            "start": self.date,
            "end": self.date,
            "allDay": True,
            "display": "background",
            "id": self.pk,
        }

    class Meta:
        ordering = [
            "country",
            "date",
        ]
        unique_together = ["date", "country", "reason"]

