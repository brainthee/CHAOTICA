%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2372 694
%%HiResBoundingBox: 0 0 2371.9199 693.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2371.9199 693.12 re
W
q
[0.24 0 0 -0.24 0 693.12] cm
q
0 0 9883.333 2884.9829 re
W*
q
[29.355949 0 0 29.354731 -26.123457 -158.222015] cm
q
14.03 50.029999 m
27.529999 63.529999 l
41.029999 50.029999 l
27.529999 36.529999 l
14.03 50.029999 l
27.530001 32.029999 m
45.529999 50.029999 l
27.529999 68.029999 l
9.529999 50.029999 l
27.530001 32.029999 l
W*
[36.000003 0 0 35.999999 9.53 32.030002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
27.530001 54.529999 m
32.029999 50.029999 l
27.529999 45.529999 l
23.029999 50.029999 l
27.530001 54.529999 l
18.530001 50.029999 m
27.530001 41.029999 l
36.529999 50.029999 l
27.529999 59.029999 l
18.530001 50.029999 l
W*
[17.999999 0 0 18 18.530002 41.030002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
68.029999 72.529999 m
50.029999 54.529999 l
32.029999 72.529999 l
50.029999 90.529999 l
68.029999 72.529999 l
72.529999 72.529999 m
50.029999 95.029999 l
27.529999 72.529999 l
50.029999 50.029999 l
72.529999 72.529999 l
W*
[45.000002 0 0 44.999998 27.53 50.030003] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
59.029999 72.529999 m
50.029999 63.529999 l
41.029999 72.529999 l
50.029999 81.529999 l
59.029999 72.529999 l
63.529999 72.529999 m
50.029999 86.029999 l
36.529999 72.529999 l
50.029999 59.029999 l
63.529999 72.529999 l
W*
[27.000001 0 0 26.999999 36.530002 59.029999] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
54.529999 72.529999 m
50.029999 77.029999 l
45.529999 72.529999 l
50.029999 68.029999 l
54.529999 72.529999 l
W*
[9.000001 0 0 9 45.530002 68.03] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
41.029999 27.530001 m
50.029999 36.529999 l
59.029999 27.529999 l
50.029999 18.529999 l
41.029999 27.530001 l
36.529999 27.530001 m
50.029999 14.030001 l
63.529999 27.530001 l
50.029999 41.029999 l
36.529999 27.530001 l
W*
[27.000001 0 0 26.999997 36.530002 14.030005] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
45.529999 27.530001 m
50.029999 23.030001 l
54.529999 27.530001 l
50.029999 32.029999 l
45.529999 27.530001 l
W*
[9.000001 0 0 8.999998 45.530002 23.030001] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
q
72.529999 45.529999 m
68.029999 50.029999 l
72.529999 54.529999 l
77.029999 50.029999 l
72.529999 45.529999 l
81.529999 50.029999 m
72.529999 59.029999 l
63.529999 50.029999 l
72.529999 41.029999 l
81.529999 50.029999 l
W*
[18.000001 0 0 18 63.530002 41.030002] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
q
[39.473042 0 0 39.471401 2822.1343 423.58957] cm
q
8.3008 33.085899 m
6.3477 31.132799 5.3711 28.7759 5.3711 26.015598 c
5.3711 23.255297 6.347661 20.898399 8.3008 18.945297 c
10.253901 16.979097 12.6108 15.996098 15.3711 15.996098 c
17.063801 15.996098 18.645901 16.399748 20.117201 17.206997 c
20.117201 12.558597 l
18.5807 12.024747 16.9986 11.757816 15.371101 11.757816 c
11.438902 11.757816 8.079501 13.151016 5.293101 15.937516 c
2.506702 18.724016 1.113401 22.083416 1.113401 26.015516 c
1.113401 29.947617 2.506601 33.307117 5.293101 36.093517 c
8.079601 38.879917 11.439001 40.273216 15.371101 40.273216 c
16.998701 40.273216 18.580702 39.999775 20.117201 39.452908 c
20.117201 34.824009 l
18.645901 35.61829 17.0639 36.015408 15.371101 36.015408 c
12.610702 36.015408 10.253902 35.038849 8.300801 33.085709 c
8.3008 33.085899 l
h
39.277061 12.051 m
39.277061 23.887001 l
27.910061 23.887001 l
27.910061 12.090001 l
23.671761 12.090001 l
23.671761 40 l
27.910061 40 l
27.910061 28.125 l
39.277061 28.125 l
39.277061 40 l
43.515362 40 l
43.515362 12.051001 l
39.277061 12.051001 l
39.277061 12.051 l
h
64.18 12.051 m
46.503998 40 l
51.523499 40 l
55.6446 33.476601 l
65.136803 33.476601 l
65.136803 40 l
69.3946 40 l
69.3946 12.051001 l
64.179802 12.051001 l
64.18 12.051 l
h
65.137001 18.476999 m
65.137001 29.238998 l
58.320602 29.238998 l
65.137001 18.476999 l
h
79.863304 18.945 m
77.910202 20.8981 76.933601 23.254999 76.933601 26.015301 c
76.933601 28.775602 77.910164 31.1325 79.863304 33.085602 c
81.816444 35.038704 84.173302 36.015301 86.933601 36.015301 c
89.693901 36.015301 92.050804 35.038742 94.003899 33.085602 c
95.956993 31.132462 96.933601 28.775602 96.933601 26.015301 c
96.933601 23.254999 95.957039 20.898102 94.003899 18.945 c
92.050758 16.991898 89.693901 16.015301 86.933601 16.015301 c
84.173302 16.015301 81.816399 16.991861 79.863304 18.945 c
h
76.855507 36.0937 m
74.069008 33.307201 72.675804 29.9478 72.675804 26.015701 c
72.675804 22.083603 74.069008 18.724102 76.855507 15.937701 c
79.642006 13.1513 83.001404 11.758001 86.93351 11.758001 c
90.865616 11.758001 94.225113 13.151201 97.011513 15.937701 c
99.797913 18.724201 101.191216 22.083601 101.191216 26.015701 c
101.191216 29.947802 99.798012 33.307301 97.011513 36.0937 c
94.225014 38.8801 90.865616 40.273399 86.93351 40.273399 c
83.001404 40.273399 79.641907 38.880199 76.855507 36.0937 c
h
100.937515 12.051 m
100.937515 16.289299 l
106.855515 16.289299 l
106.855515 40.000298 l
111.113312 40.000298 l
111.113312 16.289297 l
117.031311 16.289297 l
117.031311 12.050997 l
100.937309 12.050997 l
100.937515 12.051 l
h
125.117195 12.09 m
120.878899 12.09 l
120.878899 40 l
125.117195 40 l
125.117195 12.09 l
h
135.70314 33.085899 m
133.750046 31.132799 132.773438 28.7759 132.773438 26.015598 c
132.773438 23.255297 133.75 20.898399 135.70314 18.945297 c
137.656235 16.979097 140.013138 15.996098 142.773438 15.996098 c
144.466141 15.996098 146.048233 16.399748 147.519531 17.206997 c
147.519531 12.558597 l
145.983032 12.024747 144.400925 11.757816 142.773438 11.757816 c
138.841232 11.757816 135.481842 13.151016 132.695435 15.937516 c
129.909027 18.724016 128.515732 22.083416 128.515732 26.015516 c
128.515732 29.947617 129.908936 33.307117 132.695435 36.093517 c
135.481934 38.879917 138.841339 40.273216 142.773438 40.273216 c
144.401031 40.273216 145.983032 39.999775 147.519531 39.452908 c
147.519531 34.824009 l
146.048233 35.61829 144.466232 36.015408 142.773438 36.015408 c
140.013031 36.015408 137.656235 35.038849 135.70314 33.085709 c
135.70314 33.085899 l
h
167.246399 12.051 m
149.570404 40 l
154.589905 40 l
158.710999 33.476601 l
168.2032 33.476601 l
168.2032 40 l
172.461 40 l
172.461 12.051001 l
167.246201 12.051001 l
167.246399 12.051 l
h
168.2034 18.476999 m
168.2034 29.238998 l
161.386993 29.238998 l
168.2034 18.476999 l
h
W
[171.347603 0 0 28.515583 1.113402 11.757818] cm
/DeviceRGB {} cs
/t0 0 def
/t1 1 def
/dt 1 def
/x0 0 def
/y0 0 def
/dx 1 def
/x1 1 def
/y1 0 def
/dy 0 def
/xMin -0 def
/yMin -0 def
/xMax 1 def
/yMax 1 def
/n 3 def
/func { dup 0 lt { pop 0 } { dup 1 gt { pop 1 } if } ifelse
0 index 1 exp 0.047 mul 0.937 add
1 index 1 exp 0.435 mul 0.255 add
2 index 1 exp 0.039 mul 0.212 add
4 3 roll pop 
}
def
-0 1 0 axialSH
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
