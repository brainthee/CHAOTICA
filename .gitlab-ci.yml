image: docker:20.10.16

variables:
  TF_BASE: ${CI_PROJECT_DIR}/terraform
  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}
  DOCKER_DRIVER: overlay2
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  # DOCKER_HOST: tcp://docker:2376
  # DOCKER_TLS_CERTDIR: "/certs"
  # DOCKER_TLS_VERIFY: 1
  # DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"

cache:
  paths:
    - ${TF_BASE}/dev/.terraform
    - ${TF_BASE}/prod/.terraform
    - .cache/pip

services:
  - docker:20.10.16-dind

stages:
  - sonarqube-check
  - sonarqube-vulnerability-report
  - build
  - prepare
  - deploy
  - destroy

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

# sonarqube-vulnerability-report:
#   stage: sonarqube-vulnerability-report
#   script:
#     - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=adrian_chaotica_AYq54DpjF1N3RWkS8RgQ&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
#   allow_failure: true
#   only:
#     - merge_requests
#     - master
#     - main
#     - develop
#   artifacts:
#     expire_in: 1 day
#     reports:
#       sast: gl-sast-sonar-report.json
#   dependencies:
#     - sonarqube-check


#########################################################
## Docker Bits
#########################################################
.docker_build_template:
  image: docker:20.10.16-dind
  stage: build
  variables:
    MAIN_TAG: latest
    COMPONENT: na
    BUILD_PATH: "./app"
    DOCKERFILE: ""
  script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip3 install virtualenv
    - virtualenv venv
    - source venv/bin/activate
    - pip3 install awscli
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"

    - echo "Building AWS image..."
    # Private ECR
    # - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
    # Public ECR
    - aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${AWS_REPOSITORY_URL}
    - docker pull $AWS_REPOSITORY_URL/$COMPONENT:$MAIN_TAG || true
    - docker build --cache-from $AWS_REPOSITORY_URL/$COMPONENT:$MAIN_TAG -t $AWS_REPOSITORY_URL/$COMPONENT:$MAIN_TAG $DOCKERFILE $BUILD_PATH
    - docker push $AWS_REPOSITORY_URL/$COMPONENT:$MAIN_TAG

    # - echo "Building GitLab image..."
    # - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # - docker pull $CI_REGISTRY_IMAGE/$COMPONENT:$MAIN_TAG || true
    # - docker build --cache-from $CI_REGISTRY_IMAGE/$COMPONENT:$MAIN_TAG -t $CI_REGISTRY_IMAGE/$COMPONENT:$MAIN_TAG $DOCKERFILE $BUILD_PATH
    # - docker push $CI_REGISTRY_IMAGE/$COMPONENT:$MAIN_TAG

app:build_main:
  extends: .docker_build_template
  variables:
    COMPONENT: "chaotica"
    BUILD_PATH: "./app"
    DOCKERFILE: ""
  only:
    refs:
      - main
      
app:build_review:
  extends: .docker_build_template
  variables:
    MAIN_TAG: "${CI_BUILD_REF_NAME}"
    COMPONENT: "chaotica"
    BUILD_PATH: "./app"
    DOCKERFILE: ""
  only:
    - branches
  except:
    - main 

#########################################################
## END/Docker Bits
#########################################################


#########################################################
## TF Bits
#########################################################

.tf_template:
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

#########################################################
##### Review Apps
#########################################################

.tf_review:
  before_script:
    - cd ${TF_BASE}
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
    - TF_VAR_tag="$(echo $CI_COMMIT_SHA | head -c 8)"
  extends: .tf_template
  environment:
    deployment_tier: testing
    name: review/${CI_COMMIT_REF_NAME}
    url: https://${CI_ENVIRONMENT_SLUG}.${DOMAIN_NAME}
    on_stop: destroy:tf_review
    auto_stop_in: 1 week
  variables:
    TF_ROOT: "${TF_BASE}/dev"
    TF_VAR_region: "${AWS_DEFAULT_REGION}"
    TF_VAR_domain_name: "${DOMAIN_NAME}"
    TF_VAR_subdomain_name: "${CI_ENVIRONMENT_SLUG}"

    TF_VAR_app_tag: "${CI_BUILD_REF_NAME}"
    TF_VAR_repo_url: "${AWS_REPOSITORY_URL}"
    TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/review_${CI_ENVIRONMENT_SLUG}


plan:tf_review:
  extends: .tf_review
  stage: prepare
  script:
    - gitlab-terraform plan
    - gitlab-terraform plan-json
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  only:
    - branches
  except:
    - main 

deploy_review:tf_review:
  extends: .tf_review
  stage: deploy
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform apply
    - gitlab-terraform output -json | jq . > output.json
    - export ENV_URL=$(gitlab-terraform output --json |jq .environment_url.value -r)
    - echo "ENV_URL=$ENV_URL" >> deploy.env    # Add the value to a dotenv file.
    - echo ${ENV_URL}    # Check its there!
  dependencies:
    - plan:tf_review
  artifacts:
    reports:
      dotenv: ${TF_ROOT}/deploy.env
  only:
    - branches
  except:
    - main 

destroy:tf_review:
  extends: .tf_review
  stage: destroy
  variables:
    GIT_STRATEGY: none
  environment:
    name: review/${CI_COMMIT_REF_NAME}
    action: stop
  script:
    - cd ${TF_ROOT}
    - gitlab-terraform destroy
  dependencies:
    - deploy_review:tf_review
  only:
    - branches
  except:
    - main 
  when: manual